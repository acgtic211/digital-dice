apiVersion: v1
kind: ConfigMap
metadata:
  name: digitaldice-config
data:
  PORT_CONTROLLER: "443"
  PORT2_CONTROLLER: "80"
  PORT_DH: "8063"
  PORT_EH: "8064"
  DEVICE_URI: "192.168.1.38"
  DH: "https://digital-dice-dh-entrypoint"
  EH: "https://digital-dice-eh-entrypoint"
  DB_NAME: "dd-db"
  DB_USER: "dd_admin"
  DB_PASS: "123456admin"
  DB_URI: "mongodb://mongo-0.mongo-headless.default:27017,mongo-1.mongo-headless.default:27017,mongo-2.mongo-headless.default:27017/"
  TD_O: "{
    \"@context\": \"https://www.w3.org/2019/wot/td/v1\",
    \"id\": \"urn:uuid:0804d572-cce8-422a-bb7c-4412fcd56f06\",
    \"title\": \"MyLampThing\",
    \"securityDefinitions\": {
        \"basic_sc\": {\"scheme\": \"basic\", \"in\": \"header\"}
    },
    \"security\": [\"basic_sc\"],
    \"properties\": {
        \"status\": {
            \"type\": \"string\",
            \"forms\": [{\"href\": \"https://mylamp.example.com/status\"}]
        }
    },
    \"actions\": {
        \"toggle\": {
            \"forms\": [{\"href\": \"https://mylamp.example.com/toggle\"}]
        }
    },
    \"events\": {
        \"overheating\": {
            \"data\": {\"type\": \"string\"},
            \"forms\": [{
                \"href\": \"https://mylamp.example.com/oh\",
                \"subprotocol\": \"longpoll\"
            }]
        }
    }
  }"
  TD_O_URL: "https://example.com"
  


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: digital-dice-controller
spec:
  replicas: 1
  selector:
    matchLabels:
      app: digital-dice-controller
  template:
    metadata:
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/path: /metrics
        prometheus.io/port: '443'
      labels:
        app: digital-dice-controller
    spec:
      containers:
      - name: digital-dice-controller
        image: digital-dice-controller:latest
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            cpu: 100m
        envFrom:
          - configMapRef:
              name: digitaldice-config
        volumeMounts:
          - name: tls-digitaldice
            mountPath: "/app/certs"
            readOnly: true
      volumes:
          - name: tls-digitaldice
            secret:
              secretName: tls-digitaldice
---
apiVersion: v1
kind: Service
metadata:
  name: digital-dice-controller-entrypoint
spec:
  type: NodePort
  selector:
    app: digital-dice-controller
  ports:
  - port: 443
    targetPort: 443
    nodePort: 30002
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: digital-dice-dh
spec:
  replicas: 1
  selector:
    matchLabels:
      app: digital-dice-dh
  template:
    metadata:
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/path: /metrics
        prometheus.io/port: '443'
      labels:
        app: digital-dice-dh
    spec:
      containers:
      - name: digital-dice-dh
        image: digital-dice-dh:latest
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            cpu: 100m
        envFrom:
          - configMapRef:
              name: digitaldice-config
        volumeMounts:
          - name: tls-digitaldice
            mountPath: "/app/certs"
            readOnly: true
      volumes:
          - name: tls-digitaldice
            secret:
              secretName: tls-digitaldice
---
apiVersion: v1
kind: Service
metadata:
  name: digital-dice-dh-entrypoint
spec:
  selector:
    app: digital-dice-dh
  ports:
  - protocol: TCP
    port: 443
    targetPort: 443
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: digital-dice-eh
spec:
  replicas: 1
  selector:
    matchLabels:
      app: digital-dice-eh
  template:
    metadata:
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/path: /metrics
        prometheus.io/port: '443'
      labels:
        app: digital-dice-eh
    spec:
      containers:
      - name: digital-dice-eh
        image: digital-dice-eh:latest
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            cpu: 100m
        envFrom:
          - configMapRef:
              name: digitaldice-config
        volumeMounts:
          - name: tls-digitaldice
            mountPath: "/app/certs"
            readOnly: true
      volumes:
          - name: tls-digitaldice
            secret:
              secretName: tls-digitaldice
---
apiVersion: v1
kind: Service
metadata:
  name: digital-dice-eh-entrypoint
spec:
  selector:
    app: digital-dice-eh
  ports:
  - protocol: TCP
    port: 443
    targetPort: 443
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: digital-dice-reflection
spec:
  replicas: 1
  selector:
    matchLabels:
      app: digital-dice-reflection
  template:
    metadata:
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/path: /metrics
        prometheus.io/port: '443'
      labels:
        app: digital-dice-reflection
    spec:
      containers:
      - name: digital-dice-reflection
        image: digital-dice-reflection:latest
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            cpu: 100m
        envFrom:
          - configMapRef:
             name: digitaldice-config
        volumeMounts:
          - name: tls-digitaldice
            mountPath: "/app/certs"
            readOnly: true
      volumes:
          - name: tls-digitaldice
            secret:
              secretName: tls-digitaldice
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: digital-dice-controller
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: digital-dice-controller
  minReplicas: 1
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: digital-dice-dh
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: digital-dice-dh
  minReplicas: 1
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50
